<?php

/**
 * @file
 * Generates and attaches the <meta> and <link> tags needed for the PWA.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;
use Drupal\social_pwa\BrowserDetector;

/**
 * Implements hook_page_attachments().
 */
function social_pwa_page_attachments(array &$page) {

  $account = \Drupal::currentUser();
  // PWA is for logged in users only since
  // we store the subscription ID to the uid.
  if ($account->isAnonymous()) {
    return;
  }

  // Get the uploaded icon.
  $icon = \Drupal::config('social_pwa.settings')->get('icons.icon');

  if ($icon === NULL || !isset($icon[0])) {
    return;
  }

  // Get the file id and path.
  $fid = $icon[0];
  /** @var \Drupal\file\Entity\File $file */
  $file = File::load($fid);
  $path = $file->getFileUri();

  // LINK: Provide the icons.
  $page['#attached']['html_head_link'][][] = [
    // Icon support for Chrome on Android.
    'rel' => 'icon',
    'sizes' => '256x256',
    'href' => file_url_transform_relative(ImageStyle::load('social_pwa_icon_256')->buildUrl($path)),
  ];
  $page['#attached']['html_head_link'][][] = [
    // Icon support for Safari on iOS.
    'rel' => 'apple-touch-icon',
    'sizes' => '180x180',
    'href' => file_url_transform_relative(ImageStyle::load('social_pwa_icon_180')->buildUrl($path)),
  ];

  // Attach the main.js and sw.js in the render array.
  $page['#attached']['library'][] = 'social_pwa/main-js';
  $page['#attached']['library'][] = 'social_pwa/service-worker';

  // Add the public VAPID key.
  $vapid_keys = \Drupal::state()->get('social_pwa.vapid_keys');
  $page['#attached']['drupalSettings']['vapidPublicKey'] = $vapid_keys['public'];

  // Attach the generated data from /manifest.json.
  $page['#attached']['html_head_link'][][] = [
    // Get the contents of the Manifest.
    'rel' => 'manifest',
    'href' => '/manifest.json',
  ];

  // META: Attach the meta tags.
  $meta_pwa = [
    // Chrome and Android Support: Add to home screen for Chrome on Android.
    'mobile-web-app-capable' => [
      '#tag' => 'meta',
      '#attributes' => [
        'name' => 'mobile-web-app-capable',
        'content' => 'yes',
      ],
    ],
    'application-name' => [
      '#tag' => 'meta',
      '#attributes' => [
        'name' => 'application-name',
        'content' => \Drupal::config('social_pwa.settings')->get('short_name'),
      ],
    ],
    // iOS Support: Add to home screen for Safari on iOS
    // content is set to 'no' to allow cookies.
    'apple-mobile-web-app-capable' => [
      '#tag' => 'meta',
      '#attributes' => [
        'name' => 'apple-mobile-web-app-capable',
        'content' => 'no',
      ],
    ],
    'apple-mobile-web-app-status-bar-style' => [
      '#tag' => 'meta',
      '#attributes' => [
        'name' => 'apple-mobile-web-app-status-bar-style',
        'content' => \Drupal::config('social_pwa.settings')->get('theme_color'),
      ],
    ],
    'apple-mobile-web-app-title' => [
      '#tag' => 'meta',
      '#attributes' => [
        'name' => 'apple-mobile-web-app-title',
        'content' => \Drupal::config('social_pwa.settings')->get('short_name'),
      ],
    ],
    // Windows Mobile Support: Tile icon and color for Windows Mobile.
    'msapplication-TileImage' => [
      '#tag' => 'meta',
      '#attributes' => [
        'name' => 'msapplication-TileImage',
        'content' => file_url_transform_relative(ImageStyle::load('social_pwa_icon_144')->buildUrl($path)),
      ],
    ],
    'msapplication-TileColor' => [
      '#tag' => 'meta',
      '#attributes' => [
        'name' => 'msapplication-TileColor',
        'content' => \Drupal::config('social_pwa.settings')->get('theme_color'),
      ],
    ],
    // Color the status bar on mobile devices.
    'theme-color' => [
      '#tag' => 'meta',
      '#attributes' => [
        'name' => 'theme-color',
        'content' => \Drupal::config('social_pwa.settings')
          ->get('theme_color'),
      ],
    ],
  ];
  // Generate all of the above.
  foreach ($meta_pwa as $key => $value) {
    $page['#attached']['html_head'][] = [$value, $key];
  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function social_pwa_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Get the device and subscription information about this user.
  $useragent = $_SERVER['HTTP_USER_AGENT'];
  // Browser detector.
  $bd = new BrowserDetector($useragent);
  // The device type for the icon.
  $device_type = $bd->getDeviceType();
  // The device/browser description.
  $device_description = $bd->getFormattedDescription();

  // Current user.
  $uid = Drupal::currentUser()->id();
  // Get all the subscriptions for this user.
  $user_subscriptions = \Drupal::service('user.data')
    ->get('social_pwa', $uid, 'subscription');

  // Get the uploaded icon.
  $icon = \Drupal::config('social_pwa.settings')->get('icons.icon');

  if ($icon === NULL || !isset($icon[0])) {
    return;
  }

  $form['push_notifications'] = [
    '#type' => 'fieldset',
    '#title' => t('Push notifications'),
    '#tree' => TRUE,
    '#attributes' => [
      'class' => ['form-horizontal'],
    ],
  ];
  $form['push_notifications']['description'] = [
    '#markup' => t('Show notifications in the corner of your computer screen, even if the website is closed.'),
  ];
  $form['push_notifications']['current_device'] = [
    '#type' => 'details',
    '#title' => t('<h5>Current device</h5>'),
    '#attributes' => [
      'class' => ['form-fieldset'],
    ],
  ];

  $current_browser_subscribed = TRUE;
  foreach ($user_subscriptions as $subscription) {
    if (array_key_exists($device_description, $subscription)) {
      $current_browser_subscribed = FALSE;
    }
  }

  if (!empty($user_subscriptions) && !$current_browser_subscribed) {
    // User has subscription, provide switch to turn it off.
    $form['push_notifications']['current_device']['current_allowed'] = [
      '#type' => 'checkbox',
      '#title' => '<span class="control-label__icon--bg icon-' . $device_type . '"></span>' . $device_description,
      '#disabled' => FALSE,
      // Check on this value?.
      '#default_value' => TRUE,
      '#attributes' => [
        'data-switch' => TRUE,
      ],
      '#ajax' => [
        'callback' => 'Drupal\social_pwa\Controller\UserSubscriptionController::removeSubscription',
        'progress' => ['type' => 'none'],
      ],
    ];
  }
  else {
    // User doesn't have subscription, provide switch to turn it on.
    // This already triggers the prompt in the browser through JS.
    $form['push_notifications']['current_device']['current'] = [
      '#type' => 'checkbox',
      '#title' => '<span class="control-label__icon--bg icon-' . $device_type . '"></span>' . $device_description,
      '#disabled' => FALSE,
      '#default_value' => FALSE,
      '#attributes' => [
        'data-switch' => TRUE,
      ],
    ];

    switch ($bd->getBrowserName()) {
      case 'Chrome':
        $url = 'https://support.google.com/chrome/answer/3220216?co=GENIE.Platform%3D';

        $operating_systems = ['Android', 'iOS'];
        $operating_system = $bd->getOsName();

        if (in_array($operating_system, $operating_systems)) {
          $url .= $operating_system;
        }
        else {
          $url .= 'Desktop';
        }

        $url .= '&oco=1';
        break;

      case 'Chrome Mobile':
        $url = 'https://support.google.com/chrome/answer/3220216?co=GENIE.Platform%3DAndroid&oco=1';
        break;

      case 'Chrome Mobile iOS':
        $url = 'https://support.google.com/chrome/answer/3220216?co=GENIE.Platform%3DiOS&oco=1';
        break;

      case 'Firefox':
      case 'Firefox Focus':
      case 'Firefox Mobile':
        $url = 'https://support.mozilla.org/en-US/kb/push-notifications-firefox';
        break;

      case 'Microsoft Edge':
        $url = 'https://blogs.windows.com/msedgedev/2016/05/16/web-notifications-microsoft-edge';
        break;

      case 'Opera':
      case 'Opera Mini':
      case 'Opera Mobile':
      case 'Opera Next':
        $url = 'http://help.opera.com/opera/Windows/1656/en/controlPages.html#manageNotifications';
        break;
    }

    $text = 'You have denied receiving push notifications through your browser. Please reset your browser setting for receiving notifications.';

    if (isset($url)) {
      $text = t(str_replace('reset your browser setting', '<a href="@url" target="_blank">reset your browser setting</a>', $text), [
        '@url' => $url,
      ]);
    }
    else {
      $text = t($text);
    }

    $form['push_notifications']['current_device']['blocked_notice'] = [
      '#type' => 'html_tag',
      '#tag' => 'div',
      '#attributes' => [
        'class' => ['help-block', 'blocked-notice', 'hide'],
      ],
      '#value' => $text,
    ];
  }

}
