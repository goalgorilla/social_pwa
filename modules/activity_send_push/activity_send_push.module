<?php

/**
 * @file
 * The activity_send_push module file.
 */

use Drupal\activity_creator\ActivityInterface;
use Drupal\Core\Url;
use Drupal\message\Entity\Message;
use Minishlink\WebPush\WebPush;
use Drupal\file\Entity\File;

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function activity_send_push_activity_insert(ActivityInterface $activity) {

  $destinations = $activity->getDestinations();
  if (in_array('push', $destinations)) {
    /* @var $activity_send_factory Drupal\activity_send\Plugin\ActivitySendManager */
    $activity_send_factory = \Drupal::service('plugin.manager.activity_send.processor');
    // Trigger the create action for entities.
    /* @var $create_action \Drupal\activity_send_push\Plugin\ActivitySend\PushActivitySend */
    $create_action = $activity_send_factory->createInstance('push_activity_send');
    $create_action->create($activity);

    $uid = $activity->field_activity_recipient_user->target_id;

    if (!empty($uid)) {
      // Prepare the payload with the message.
      $message_loaded = Message::load($activity->field_activity_message->target_id);
      $message = $message_loaded->getText();

      $message_to_send = '';
      if (empty($message)) {
        $message_to_send = 'test content';
      }
      if (!empty($message[0])) {
        $message_to_send = $message[0];
      }

      $icon = \Drupal::config('social_pwa.settings')->get('icons.icon');
      // Get the file id and path.
      $fid = $icon[0];

      /** @var \Drupal\file\Entity\File $file */
      $file = File::load($fid);
      $path = $file->url();

      $payload = json_encode([
        'message'=> strip_tags($message_to_send),
        'icon' => file_url_transform_relative($path),
        'url' => $activity->getRelatedEntityUrl()->toString(),
      ]);

      // Get subscription object of the selected user.
      $user_subscription = \Drupal::service('user.data')->get('social_pwa', $uid, 'subscription');

      $notifications = [];
      foreach ($user_subscription as $subscription) {
        foreach ($subscription as $key => $value) {
          $notifications[] = [
            'endpoint' => $subscription[$key]['endpoint'],
            'payload' => $payload,
            'userPublicKey' => $subscription[$key]['key'],
            'userAuthToken' => $subscription[$key]['token'],
          ];
        }
      }

      // Get the VAPID keys that were generated before.
      $vapid_keys = \Drupal::state()->get('social_pwa.vapid_keys');

      $auth = [
        'VAPID' => [
          'subject' => Url::fromRoute('<front>', [], ['absolute' => TRUE]),
          'publicKey' => $vapid_keys['public'],
          'privateKey' => $vapid_keys['private'],
        ],
      ];

      $webPush = new WebPush($auth);

      foreach ($notifications as $notification) {
        $webPush->sendNotification(
          $notification['endpoint'],
          $notification['payload'],
          $notification['userPublicKey'],
          $notification['userAuthToken']
        );
      }

      $webPush->flush();

    }
  }

}
